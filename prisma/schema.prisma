// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum PlanType {
  Screen_Protect_1_Yr
  ADLD_1_Yr
  Combo_2Yrs
  Extended_Warranty_1_Yr
  Test_Plan
}

model Store {
  id          String        @id @map("_id")
  storeName   String
  city        String
  secUsers    SECUser[]     // One store can have multiple SECs
  salesReports SalesReport[] // Store sales reports
  helpRequests HelpRequest[] // Help requests from this store
}

model SamsungSKU {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  Category     String
  ModelName    String
  plans        Plan[]
  salesReports SalesReport[] // SKU sales reports
}

model Plan {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  planType     PlanType
  price        Int
  samsungSKU   SamsungSKU?   @relation(fields: [samsungSKUId], references: [id])
  samsungSKUId String?       @db.ObjectId
  salesReports SalesReport[] // Plan sales reports
}

model SECUser {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  phone        String        @unique
  secId        String?       // Optional - SEC provides their own ID (removed @unique)
  name         String?
  storeId      String?
  store        Store?        @relation(fields: [storeId], references: [id])
  isActive     Boolean       @default(true)
  lastLoginAt  DateTime?
  salesReports SalesReport[] // SEC sales reports
  deductions   IncentiveDeduction[] // Deductions applied to this SEC
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model AdminUser {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  username  String   @unique
  password  String   // This will be bcrypt hashed
  email     String?  @unique
  name      String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model OTPSession {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  phone     String
  otp       String
  expiresAt DateTime
  isUsed    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model SalesReport {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  secUserId     String     @db.ObjectId
  secUser       SECUser    @relation(fields: [secUserId], references: [id])
  storeId       String
  store         Store      @relation(fields: [storeId], references: [id])
  samsungSKUId  String     @db.ObjectId
  samsungSKU    SamsungSKU @relation(fields: [samsungSKUId], references: [id])
  planId        String     @db.ObjectId
  plan          Plan       @relation(fields: [planId], references: [id])
  imei          String
  planPrice     Int
  incentiveEarned Int      // Calculated incentive amount
  voucherCode   String?    // Optional voucher code for incentive redemption
  isPaid        Boolean    @default(false)
  paidAt        DateTime?
  submittedAt   DateTime   @default(now())
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  deductions    IncentiveDeduction[] // Deductions related to this report

  @@index([secUserId])
  @@index([storeId])
  @@index([submittedAt])
  @@unique([imei])
}

model IncentiveDeduction {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  secUserId     String      @db.ObjectId
  secUser       SECUser     @relation(fields: [secUserId], references: [id])
  salesReportId String      @db.ObjectId
  salesReport   SalesReport @relation(fields: [salesReportId], references: [id])
  imei          String      // The invalid IMEI
  deductionAmount Int       // Amount deducted
  reason        String      // "Invalid IMEI for gift voucher"
  processedBy   String      // Admin who processed
  processedAt   DateTime    @default(now())
  notificationSent Boolean  @default(false)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([secUserId])
  @@index([imei])
  @@index([processedAt])
}

enum ReferralStatus {
  joined
  report_submitted
  voucher_initiated
}

enum ProctoringEventType {
  tab_switch
  window_blur
  no_face
  multi_face
  loud_noise
  mic_active
  video_off
}

model ProctoringEvent {
  id            String               @id @default(auto()) @map("_id") @db.ObjectId
  secId         String
  sessionToken  String?
  eventType     ProctoringEventType
  details       String?
  createdAt     DateTime             @default(now())

  @@index([secId])
  @@index([createdAt])
}

model Referral {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  referrerPhone  String          // 10-digit string of referrer (SEC)
  refereePhone   String          // 10-digit string of referee (SEC)
  status         ReferralStatus  @default(joined)
  referrerVoucher String?
  refereeVoucher  String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@index([referrerPhone])
  @@index([refereePhone])
  @@unique([referrerPhone, refereePhone])
}

enum HelpRequestType {
  voucher_issue
  general_assistance
}

enum HelpRequestStatus {
  pending
  in_progress
  resolved
}

model HelpRequest {
  id          String             @id @default(auto()) @map("_id") @db.ObjectId
  secUserId   String             @db.ObjectId
  secPhone    String             // Store phone for quick reference
  secName     String?            // Store SEC name for display
  storeId     String?            // Optional: store ID selected by SEC
  store       Store?             @relation(fields: [storeId], references: [id])
  requestType HelpRequestType
  description String
  status      HelpRequestStatus  @default(pending)
  adminNotes  String?            // Notes added by admin
  resolvedBy  String?            // Admin who resolved the request
  resolvedAt  DateTime?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  @@index([secUserId])
  @@index([status])
  @@index([createdAt])
}

model TestSubmission {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  secId                String
  sessionToken         String
  responses            Json     // Array of {questionId, selectedAnswer, answeredAt}
  score                Int
  totalQuestions       Int
  completionTime       Int      // in seconds
  isProctoringFlagged  Boolean  @default(false)
  storeId              String?
  storeName            String?
  storeCity            String?
  submittedAt          DateTime @default(now())
  createdAt            DateTime @default(now())

  @@index([secId])
  @@index([submittedAt])
}

