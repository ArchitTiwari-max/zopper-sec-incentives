// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum PlanType {
  Screen_Protect_1_Yr
  ADLD_1_Yr
  Combo_2Yrs
  Extended_Warranty_1_Yr
  Test_Plan
}

model Store {
  id          String        @id @map("_id")
  storeName   String
  city        String
  secUsers    SECUser[]     // One store can have multiple SECs
  salesReports SalesReport[] // Store sales reports
}

model SamsungSKU {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  Category     String
  ModelName    String
  plans        Plan[]
  salesReports SalesReport[] // SKU sales reports
}

model Plan {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  planType     PlanType
  price        Int
  samsungSKU   SamsungSKU?   @relation(fields: [samsungSKUId], references: [id])
  samsungSKUId String?       @db.ObjectId
  salesReports SalesReport[] // Plan sales reports
}

model SECUser {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  phone        String        @unique
  secId        String?       // Optional - SEC provides their own ID (removed @unique)
  name         String?
  storeId      String?
  store        Store?        @relation(fields: [storeId], references: [id])
  isActive     Boolean       @default(true)
  lastLoginAt  DateTime?
  salesReports SalesReport[] // SEC sales reports
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model AdminUser {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  username  String   @unique
  password  String   // This will be bcrypt hashed
  email     String?  @unique
  name      String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model OTPSession {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  phone     String
  otp       String
  expiresAt DateTime
  isUsed    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model SalesReport {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  secUserId     String     @db.ObjectId
  secUser       SECUser    @relation(fields: [secUserId], references: [id])
  storeId       String
  store         Store      @relation(fields: [storeId], references: [id])
  samsungSKUId  String     @db.ObjectId
  samsungSKU    SamsungSKU @relation(fields: [samsungSKUId], references: [id])
  planId        String     @db.ObjectId
  plan          Plan       @relation(fields: [planId], references: [id])
  imei          String
  planPrice     Int
  incentiveEarned Int      // Calculated incentive amount
  isPaid        Boolean    @default(false)
  paidAt        DateTime?
  submittedAt   DateTime   @default(now())
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@index([secUserId])
  @@index([storeId])
  @@index([submittedAt])
  @@unique([imei])
}
